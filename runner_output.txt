Welcome to the testing Bash script for goattool

Tests for Operation 1: Print the contents of one or more files

Test 1 -
	example.txt:
This is an example file.
	Input:
./goattool -p example_file.txt
	Expected Output:
Contents of file: example_file.txt
This is an example file.
	Received Output: 
Contents of file: example_file.txt
This is an example file.
=====================

Test 2 - 

Input:
./goattool -p non_existent_file.txt
Error: The file 'non_existent_file.txt' does not exist.
Received Output:
Error: The file 'non_existent_file.txt' does not exist.
=====================

Test 3 - 

file1.txt: Hello
file2.txt: World
Input:
./goattool -p file1.txt file2.txt
Expected Output:
Contents of file: file1.txt
Hello
=====================
Contents of file: file2.txt
World
Received Output:
Contents of file: file1.txt
Hello
=====================
Contents of file: file2.txt
World
=====================

Test 4 - 

Input: ./goattool -p
Expected Output:
Usage: ./goattool -p/--print <files>
Received Output:
Usage: ./goattool -p/--print <files>

=====================

Test 5 -  
example_file.txt: This is an example file.
Input: ./goattool -p example_file.txt non_existent_file.txt
Expected Output:
Contents of file: example_file.txt
This is an example file.
=====================
Error: The file 'non_existent_file.txt' does not exist.
Received Output:
Contents of file: example_file.txt
This is an example file.
=====================
Error: The file 'non_existent_file.txt' does not exist.

Tests for Operation 2: Search a file for a particular string

Test 6 - 

example_file.txt: This is an example file.
Input: ./goattool -s example_file.txt example
Expected Output:
String found in file!
Line containing text: This is an example file.
Received Output:
String found in file!
Line containing text: This is an example file.

=====================

Test 7 - 

example_file.txt: This is an example file.
Input: ./goattool -s example_file.txt string_not_in_file
Expected Output:
String 'string_not_in_file' not found in the file.
Received Output:
String 'string_not_in_file' not found in the file.

=====================

Test 8 - 

Input: ./goattool -s non_existent_file.txt search_string
Expected Output:
Error opening file: non_existent_file.txt
Received Output:
Error opening file: non_existent_file.txt

=====================

Test 9 - 

Input: ./goattool -s example_file.txt
Expected Output:
Usage: ./goattool -s/--search <file> <string>
Received Output:
Usage: ./goattool -s/--search <file> <string>

=====================

Test 10 - 

Input: ./goattool -s
Expected Output:
Usage: ./goattool -s/--search <file> <string>
Received Output:
Usage: ./goattool -s/--search <file> <string>

=====================

Tests for Operation 3: Print the size of one or more files

Test 11 - 

example_file.txt: This is an example file. (24 bytes in size)
Input: ./goattool -z example_file.txt
Expected Output:
File: example_file.txt, Size: 24 bytes
Received Output:
File: example_file.txt, Size: 24 bytes
=====================

Test 12 - 

Input: ./goattool -z non_existent_file.txt
Expected Output:
Error getting file size.: No such file or directory
Received Output:
Error getting file size.: No such file or directory

=====================

Test 13 - 

example_file.txt: This is an example file. (24 bytes in size)
Input: ./goattool -z example_file.txt non_existent_file.txt
Expected Output:
Error getting file size.: No such file or directory
File: example_file.txt, Size: 24 bytes
Received Output:
Error getting file size.: No such file or directory
File: example_file.txt, Size: 24 bytes
=====================

Test 14 - 

Input: ./goattool -z
Expected Output:
Usage: ./goattool -z/--size <files>
Received Output:
Usage: ./goattool -z/--size <files>

=====================

Test 15 - 

file1.txt: Hello (5 bytes in size)
file2.txt: World (5 bytes in size)
Input: ./goattool -z file1.txt file2.txt
Expected Output:
File: file1.txt, Size: 5 bytes
File: file2.txt, Size: 5 bytes
Received Output:
File: file1.txt, Size: 5 bytes
File: file2.txt, Size: 5 bytes
=====================

Operation 4: Merge multiple files into a single file

Test 16 - 

file1.txt: Hello
file2.txt: World
Input: ./goattool -m merged_file.txt file1.txt file2.txt
Expected Output:
merged_file.txt contents to be: 
HelloWorld || WorldHello (depending on thread chosen)
Received Output:
cat merged_file.txt
WorldHello
=====================

Test 17 - 

Input: ./goattool -m new_merge_file.txt non_existent_file.txt
Expected Output:
Error: Unable to open source file non_existent_file.txt
Received Output:
Error: Unable to open source file non_existent_file.txt

=====================

Test 18 - 

Input: ./goattool -m new_merge_file.txt
Expected Output:
Usage: ./goattool -m/--merge <output-file> <files>
Received Output:
Usage: ./goattool -m/--merge <output-file> <files>

=====================

Test 19 - 

Input: ./goattool -m
Expected Output:
Usage: ./goattool -m/--merge <output-file> <files>
Received Output:
Usage: ./goattool -m/--merge <output-file> <files>

=====================

Test 20 - 

empty.txt:
Input: ./goattool -m empty_merge.txt empty.txt
Expected Output:
empty_merge.txt contents to be: (nothing at all)
Received Output: 
cat empty_merge.txt (nothing is found in empty_merge.txt)

=====================

Operation 5: Compress a file into the .goat format

Test 21 - 

example_file.txt: This is an example file.
Input: ./goattool -c example_file.txt
Expected Output:
.goat compression completed
.goat file: example_file.goat
example.goat contents to be:
T1h1i1s1 i1s1 a1n1 e1x1a1m1p1l1e1 f1i1l1e1.1
Received Output:
.goat compression completed
.goat file: example_file.goat
Contents of example_file.goat:
T1h1i1s1 i1s1 a1n1 e1x1a1m1p1l1e1 f1i1l1e1.1
=====================

Test 22 - 

Input: ./goattool -c non_existent_file.txt
Expected Output:
Error opening source file: No such file or directory
Received Output:
Error opening source file: No such file or directory

=====================

Test 23 - 

a_letters.txt: aaaaaaaaaaaa
Input: ./goattool -c a_letters.txt
Expected Output:
.goat compression completed
.goat file: a_letters.goat
example.goat contents to be:
a12
Received Output:
.goat compression completed
.goat file: a_letters.goat
Contents of a_letters.goat:
a12
=====================

Test 24 - 

lots_of_ab.txt: aaaaaaaabbbaaaaabbbbbbbbbabaaaaaaaaaaa
Input: ./goattool -c lots_of_ab.txt
Expected Output:
.goat compression completed
.goat file: lots_of_ab.goat
example.goat contents to be:
a8b3a5b9a1b1a11
Received Output:
.goat compression completed
.goat file: lots_of_ab.goat
Contents of lots_of_ab.goat:
a8b3a5b9a1b1a11
=====================

Test 25 - 

Input: ./goattool -c
Expected Output:
Usage: ./goattool -c/--compress <file>
Received Output:
Usage: ./goattool -c/--compress <file>

=====================

Operation 6: Decompress a .goat file

Test 26 - 

example_file.goat: T1h1i1s1 i1s1 a1n1 e1x1a1m1p1l1e1.1
Input: ./goattool -d example_file.goat
Expected Output:
decompression saved into example_file.goat.decompressed.txt
example_file.goat.decompressed.txt contents to be:
This is an example file.
Received Output:
decompression saved into example_file.goat.decompressed.txt
cat example_file.goat.decompressed.txt
This is an example file.
=====================

Test 27 - 

Input: ./goattool -d non_existent_file.goat
Expected Output:
Error opening source .goat file: No such file or directory
Received Output:
Error opening source .goat file: No such file or directory

=====================

Test 28 - 

Input: ./goattool -d
Expected Output:
Usage: ./goattool -d/--decompress <file>
Received Output:
Usage: ./goattool -d/--decompress <file>

=====================

Test 29 - 

lots_of_ab.goat: a8b3a5b9a1b1a11
Input: ./goattool -d lots_of_ab.goat
Expected Output:
decompression saved into lots_of_ab.goat.decompressed.txt
lots_of_ab.goat.decompressed.txt contents to be:
aaaaaaaabbbaaaaabbbbbbbbbabaaaaaaaaaaa
Received Output:
decompression saved into lots_of_ab.goat.decompressed.txt
cat lots_of_ab.goat.decompressed.txt
aaaaaaaabbbaaaaabbbbbbbbbabaaaaaaaaaaa
=====================

Test 30 - 

Input: ./goattool -d sample.goat sample2.goat sample3.goat
Expected Output:
Usage: ./goattool -d/--decompress <file>
Received Output:
Usage: ./goattool -d/--decompress <file>

=====================

Operation 7: Print the permissions of one or more files

Test 31 - 

example_file.txt (Permissions 644): This is an example file.
Input: ./goattool -rwx example_file.txt
Expected Output:
File: example_file.txt, Permissions: 644
Received Output:
File: example_file.txt, Permissions: 644
=====================

Test 32 - 

Input: ./goattool -rwx non_existent_file.txt
Expected Output:
Error getting file permissions: No such file or directory
Received Output:
Error getting file permissions: No such file or directory

=====================

Test 33 - 

Input: ./goattool -rwx
Expected Output:
Usage: ./goattool -rwx/--permissions <files>
Received Output:
Usage: ./goattool -rwx/--permissions <files>

=====================

Test 34 - 

file1.txt (Permissions 644): Hello
file2.txt (Permissions 644): World
Input: ./goattool -rwx file1.txt file2.txt
Expected Output:
File: file1.txt, Permissions: 644
File: file2.txt, Permissions: 644
Received Output:
File: file1.txt, Permissions: 644
File: file2.txt, Permissions: 644
=====================

Test 35 - 

file1.txt (Permissions 644): Hello
file2.txt (Permissions 644): World
Input: ./goattool -rwx file1.txt file2.txt non_existent_file.txt
Expected Output:
Error getting file permissions: No such file or directory
File: file1.txt, Permissions: 644
File: file2.txt, Permissions: 644
Received Output:
Error getting file permissions: No such file or directory
File: file1.txt, Permissions: 644
File: file2.txt, Permissions: 644
=====================

Operation 8: Move a file from one place to another

Test 36 - 

source_file.txt is located on . directory
Input: ./goattool -mv source_file.txt destination_folder/renamed_file.txt
Expected Output:
File moved successfully from source_file.txt to destination_folder/renamed_file.txt
Received Output:
File moved successfully from source_file.txt to destination_folder/renamed_file.txt
=====================

Test 37 - 

Input: ./goattool -mv non_existent_file.txt destination_folder/renamed_file.txt
Expected Output:
Error moving file: No such file or directory
Received Output:
Error moving file: No such file or directory

=====================

Test 38 - 

Input: ./goattool -mv example.txt non_existent_folder/renamed.txt
Expected Output:
Error moving file: No such file or directory
Received Output:
Error moving file: No such file or directory

=====================

Test 39 - 

Input: ./goattool -mv
Expected Output:
Usage: ./goattool -mv/--move <source> <destination>
Received Output:
Usage: ./goattool -mv/--move <source> <destination>

=====================

Test 40 - 

Input: ./goattool -mv source_file.txt
Expected Output:
Usage: ./goattool -mv/--move <source> <destination>
Received Output:
Usage: ./goattool -mv/--move <source> <destination>

=====================

Operation 9: Printing the help page

Test 41 - 

Input: ./goattool -h
Expected Output:
					Help Page

Overview: GoatTool is a CLI utility for exploring and
understanding Unix file systems. It includes operations
like printing file contents, searching for strings, file
sizes, merging files, compressing/decompressing in .goat
format, displaying file permissions, moving files, and
providing a help page. Simplifies file management and
offers insights into your file system.

Usage: ./goattool [switch] [arguments]

Switches:
  -p, --print <files>			Print contents of 1+ files.
  -s, --search <file> <str>			Search file for a string and
                                       print every line with string.
  -z, --size <files>			Print size of one or more files.
  -m, --merge <output> <files>			Merge files into a file
                                          with a name and path.
  -c, --compress <file>			Compress a text file to .goat.
                                   with a specified name and path.
  -d, --decompress <file>			Decompress a .goat file to get
                                     the original text.
  -rwx, --permissions <files>			Print permissions of
                                        files (000 to 777).
  -mv, --move <source> <dest>			Move a file from source
                                         path to destination path.
  -h, --help                 			Print a help page.

Examples:
> ./goattool -s file.txt password
> ./goattool -mv writing.txt ~/dev/new.txt
> ./goattool -m ~/projects/project.txt part1.txt part2.txt
Received Output:
					Help Page

Overview: GoatTool is a CLI utility for exploring and
understanding Unix file systems. It includes operations
like printing file contents, searching for strings, file
sizes, merging files, compressing/decompressing in .goat
format, displaying file permissions, moving files, and
providing a help page. Simplifies file management and
offers insights into your file system.

Usage: ./goattool [switch] [arguments]

Switches:
  -p, --print <files>			Print contents of 1+ files.
  -s, --search <file> <str>			Search file for a string and
                           			print every line with string.
  -z, --size <files>			Print size of one or more files.
  -m, --merge <output> <files>			Merge files into a file
                              			with a name and path.
  -c, --compress <file>			Compress a text file to .goat.
                       			with a specified name and path.
  -d, --decompress <file>			Decompress a .goat file to get
                         			the original text.
  -rwx, --permissions <files>			Print permissions of
                            			files (000 to 777).
  -mv, --move <source> <dest>			Move a file from source
                             			path to destination path.
  -h, --help                 			Print a help page.

Examples:
> ./goattool -s file.txt password
> ./goattool -mv writing.txt ~/dev/new.txt
> ./goattool -m ~/projects/project.txt part1.txt part2.txt
=====================

Test 42 - 

Input: ./goattool
Expected Output:
					Help Page

Overview: GoatTool is a CLI utility for exploring and
understanding Unix file systems. It includes operations
like printing file contents, searching for strings, file
sizes, merging files, compressing/decompressing in .goat
format, displaying file permissions, moving files, and
providing a help page. Simplifies file management and
offers insights into your file system.

Usage: ./goattool [switch] [arguments]

Switches:
  -p, --print <files>			Print contents of 1+ files.
  -s, --search <file> <str>			Search file for a string and
                                       print every line with string.
  -z, --size <files>			Print size of one or more files.
  -m, --merge <output> <files>			Merge files into a file
                                          with a name and path.
  -c, --compress <file>			Compress a text file to .goat.
                                   with a specified name and path.
  -d, --decompress <file>			Decompress a .goat file to get
                                     the original text.
  -rwx, --permissions <files>			Print permissions of
                                        files (000 to 777).
  -mv, --move <source> <dest>			Move a file from source
                                         path to destination path.
  -h, --help                 			Print a help page.

Examples:
> ./goattool -s file.txt password
> ./goattool -mv writing.txt ~/dev/new.txt
> ./goattool -m ~/projects/project.txt part1.txt part2.txt
Received Output:
					Help Page

Overview: GoatTool is a CLI utility for exploring and
understanding Unix file systems. It includes operations
like printing file contents, searching for strings, file
sizes, merging files, compressing/decompressing in .goat
format, displaying file permissions, moving files, and
providing a help page. Simplifies file management and
offers insights into your file system.

Usage: ./goattool [switch] [arguments]

Switches:
  -p, --print <files>			Print contents of 1+ files.
  -s, --search <file> <str>			Search file for a string and
                           			print every line with string.
  -z, --size <files>			Print size of one or more files.
  -m, --merge <output> <files>			Merge files into a file
                              			with a name and path.
  -c, --compress <file>			Compress a text file to .goat.
                       			with a specified name and path.
  -d, --decompress <file>			Decompress a .goat file to get
                         			the original text.
  -rwx, --permissions <files>			Print permissions of
                            			files (000 to 777).
  -mv, --move <source> <dest>			Move a file from source
                             			path to destination path.
  -h, --help                 			Print a help page.

Examples:
> ./goattool -s file.txt password
> ./goattool -mv writing.txt ~/dev/new.txt
> ./goattool -m ~/projects/project.txt part1.txt part2.txt
=====================

